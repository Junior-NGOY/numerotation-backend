// Charger dotenv en premier
require("dotenv").config();

import { db } from "./src/db/db";
import bcrypt from "bcryptjs";

async function testDatabaseConnection() {
  console.log("üîç Test de connexion √† la base de donn√©es...");
  
  // V√©rifier les variables d'environnement d'abord
  console.log("üìã Variables d'environnement :");
  console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? 'D√©finie' : 'Non d√©finie'}`);
  console.log(`   JWT_SECRET: ${process.env.JWT_SECRET ? 'D√©finie' : 'Non d√©finie'}`);
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'undefined'}`);
  
  if (!process.env.DATABASE_URL) {
    console.error("‚ùå DATABASE_URL non d√©finie !");
    console.error("üí° V√©rifiez que le fichier .env existe et contient DATABASE_URL");
    return;
  }
  
  try {
    // Test de connexion
    const result = await db.$queryRaw`SELECT 1 as test`;
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie:", result);
    
    // Test de lecture des utilisateurs
    const userCount = await db.user.count();
    console.log(`‚úÖ Nombre d'utilisateurs dans la base: ${userCount}`);
    
    // Si aucun utilisateur, cr√©er un utilisateur de test
    if (userCount === 0) {
      console.log("‚ÑπÔ∏è  Aucun utilisateur trouv√©, cr√©ation d'un utilisateur de test...");
      
      const hashedPassword = await bcrypt.hash("password123", 12);
      
      const testUser = await db.user.create({
        data: {
          email: "admin@test.com",
          name: "Admin Test",
          password: hashedPassword,
          role: "ADMIN"
        }
      });
      
      console.log("‚úÖ Utilisateur de test cr√©√©:", {
        id: testUser.id,
        email: testUser.email,
        name: testUser.name,
        role: testUser.role
      });
      console.log("üîë Utilisez les identifiants suivants pour vous connecter:");
      console.log("   Email: admin@test.com");
      console.log("   Mot de passe: password123");
    } else {
      // Afficher les utilisateurs existants
      const users = await db.user.findMany({
        select: {
          id: true,
          email: true,
          name: true,
          role: true,
          isActive: true
        }
      });
      
      console.log("‚úÖ Utilisateurs existants:");
      users.forEach(user => {
        console.log(`   - ${user.email} (${user.name}) - ${user.role} - ${user.isActive ? 'Actif' : 'Inactif'}`);
      });
    }
    
  } catch (error) {
    console.error("‚ùå Erreur lors du test de la base de donn√©es:", error);
    
    if (error instanceof Error) {
      if (error.message.includes('timeout')) {
        console.error("üí° Suggestion: V√©rifiez votre connexion internet et l'URL de la base de donn√©es");
      } else if (error.message.includes('authentication')) {
        console.error("üí° Suggestion: V√©rifiez les identifiants de la base de donn√©es dans .env");
      } else if (error.message.includes('does not exist')) {
        console.error("üí° Suggestion: Ex√©cutez 'npx prisma migrate dev' pour cr√©er les tables");
      }
    }
  } finally {
    await db.$disconnect();
  }
}

// Test du JWT
function testJWT() {
  console.log("\nüîç Test de la configuration JWT...");
  
  const jwtSecret = process.env.JWT_SECRET;
  if (!jwtSecret) {
    console.error("‚ùå JWT_SECRET non d√©fini dans .env");
    return false;
  }
  
  if (jwtSecret === "vehicle-registration-super-secret-jwt-key-2024-change-this-in-production") {
    console.log("‚ö†Ô∏è  JWT_SECRET utilise la valeur par d√©faut (OK pour le d√©veloppement)");
  }
  
  console.log("‚úÖ JWT_SECRET configur√©");
  return true;
}

async function runDiagnostics() {
  console.log("üöÄ Diagnostic du backend de l'application vehicle-registration\n");
  
  // Test des variables d'environnement
  console.log("üîç Variables d'environnement:");
  console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? 'D√©finie' : 'Non d√©finie'}`);
  console.log(`   JWT_SECRET: ${process.env.JWT_SECRET ? 'D√©finie' : 'Non d√©finie'}`);
  console.log(`   PORT: ${process.env.PORT || '8000'}`);
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'undefined'}\n`);
  
  // Test JWT
  testJWT();
  
  // Test de la base de donn√©es
  await testDatabaseConnection();
  
  console.log("\nüéØ Si le probl√®me persiste:");
  console.log("1. V√©rifiez que le serveur backend est d√©marr√© avec 'npm run dev'");
  console.log("2. V√©rifiez que l'URL frontend pointe vers http://localhost:8000");
  console.log("3. V√©rifiez les logs du serveur backend");
  console.log("4. Essayez de faire une requ√™te directe: curl http://localhost:8000/health");
}

runDiagnostics().catch(console.error);
